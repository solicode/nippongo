(ns nippongo.core
  (:require [nippongo.chars :as ch]
            [nippongo.util :refer [map-string every-char? some-char?]]))

(def verb-endings (map str "ぶぐくむるすつうぬ"))

(defprotocol IJapaneseText
  (hiragana? [text])
  (half-width-katakana? [text])
  (full-width-katakana? [text])
  (katakana? [text])
  (kana? [text])
  (kanji? [text])
  (half-width-lowercase-letter? [text])
  (half-width-uppercase-letter? [text])
  (full-width-lowercase-letter? [text])
  (full-width-uppercase-letter? [text])
  (half-width-letter? [text])
  (full-width-letter? [text])
  (letter? [text])
  (half-width-digit? [text])
  (full-width-digit? [text])
  (digit? [text])
  (romaji? [text]) ; TODO: Add support for different romanization types
  (->dakuten [text])
  (->handakuten [text])
  (full-width-hiragana->full-width-katakana [text])
  (full-width-katakana->full-width-hiragana [text]))

#?(:clj
   (extend-protocol IJapaneseText
     Character
     (hiragana? [c] (ch/hiragana? c))
     (half-width-katakana? [c] (ch/half-width-katakana? c))
     (full-width-katakana? [c] (ch/full-width-katakana? c))
     (katakana? [c] (ch/katakana? c))
     (kana? [c] (ch/kana? c))
     (kanji? [c] (ch/kanji? c))
     (half-width-lowercase-letter? [c] (ch/half-width-lowercase-letter? c))
     (half-width-uppercase-letter? [c] (ch/half-width-uppercase-letter? c))
     (full-width-lowercase-letter? [c] (ch/full-width-lowercase-letter? c))
     (full-width-uppercase-letter? [c] (ch/full-width-uppercase-letter? c))
     (half-width-letter? [c] (ch/half-width-letter? c))
     (full-width-letter? [c] (ch/full-width-letter? c))
     (letter? [c] (ch/letter? c))
     (half-width-digit? [c] (ch/half-width-digit? c))
     (full-width-digit? [c] (ch/full-width-digit? c))
     (digit? [c] (ch/digit? c))
     (romaji? [c] (ch/romaji? c))
     (full-width-hiragana->full-width-katakana [c] (ch/full-width-hiragana->full-width-katakana c))
     (full-width-katakana->full-width-hiragana [c] (ch/full-width-katakana->full-width-hiragana c))
     (->dakuten [c] (ch/->dakuten c))
     (->handakuten [c] (ch/->handakuten c))))

(extend-protocol IJapaneseText
  #?(:clj String :cljs string)
  (hiragana? [s] (every-char? ch/hiragana? s))
  (half-width-katakana? [s] (every-char? ch/half-width-katakana? s))
  (full-width-katakana? [s] (every-char? ch/full-width-katakana? s))
  (katakana? [s] (every-char? ch/katakana? s))
  (kana? [s] (every-char? ch/kana? s))
  (kanji? [s] (every-char? ch/kanji? s))
  (half-width-lowercase-letter? [s] (every-char? ch/half-width-lowercase-letter? s))
  (half-width-uppercase-letter? [s] (every-char? ch/half-width-uppercase-letter? s))
  (full-width-lowercase-letter? [s] (every-char? ch/full-width-lowercase-letter? s))
  (full-width-uppercase-letter? [s] (every-char? ch/full-width-uppercase-letter? s))
  (half-width-letter? [s] (every-char? ch/half-width-letter? s))
  (full-width-letter? [s] (every-char? ch/full-width-letter? s))
  (letter? [s] (every-char? ch/letter? s))
  (half-width-digit? [s] (every-char? ch/half-width-digit? s))
  (full-width-digit? [s] (every-char? ch/full-width-digit? s))
  (digit? [s] (every-char? ch/digit? s))
  (romaji? [s] (every-char? ch/romaji? s))
  (->dakuten [s] (map-string ch/->dakuten s))
  (->handakuten [s] (map-string ch/->handakuten s))
  (full-width-hiragana->full-width-katakana [s] (map-string ch/full-width-hiragana->full-width-katakana s))
  (full-width-katakana->full-width-hiragana [s] (map-string ch/full-width-katakana->full-width-hiragana s))

  #?(:clj Object :cljs object)
  (hiragana? [coll] (every? hiragana? coll))
  (half-width-katakana? [coll] (every? half-width-katakana? coll))
  (full-width-katakana? [coll] (every? full-width-katakana? coll))
  (katakana? [coll] (every? katakana? coll))
  (kana? [coll] (every? kana? coll))
  (kanji? [coll] (every? kanji? coll))
  (half-width-lowercase-letter? [coll] (every? half-width-lowercase-letter? coll))
  (half-width-uppercase-letter? [coll] (every? half-width-uppercase-letter? coll))
  (full-width-lowercase-letter? [coll] (every? full-width-lowercase-letter? coll))
  (full-width-uppercase-letter? [coll] (every? full-width-uppercase-letter? coll))
  (half-width-letter? [coll] (every? half-width-letter? coll))
  (full-width-letter? [coll] (every? full-width-letter? coll))
  (letter? [coll] (every? letter? coll))
  (half-width-digit? [coll] (every? half-width-digit? coll))
  (full-width-digit? [coll] (every? full-width-digit? coll))
  (digit? [coll] (every? digit? coll))
  (romaji? [coll] (every? romaji? coll))
  (->dakuten [coll] (map ->dakuten coll))
  (->handakuten [coll] (map ->handakuten coll))
  (full-width-hiragana->full-width-katakana [coll] (map full-width-hiragana->full-width-katakana coll))
  (full-width-katakana->full-width-hiragana [coll] (map full-width-katakana->full-width-hiragana coll))

  ; Return reasonable defaults when dispatching on `nil` rather than throwing an exception.
  nil
  (hiragana? [_] false)
  (half-width-katakana? [_] false)
  (full-width-katakana? [_] false)
  (katakana? [_] false)
  (kana? [_] false)
  (kanji? [_] false)
  (half-width-lowercase-letter? [_] false)
  (half-width-uppercase-letter? [_] false)
  (full-width-lowercase-letter? [_] false)
  (full-width-uppercase-letter? [_] false)
  (half-width-letter? [_] false)
  (full-width-letter? [_] false)
  (letter? [_] false)
  (half-width-digit? [_] false)
  (full-width-digit? [_] false)
  (digit? [_] false)
  (romaji? [_] false)
  (->dakuten [_])
  (->handakuten [_])
  (full-width-hiragana->full-width-katakana [_])
  (full-width-katakana->full-width-hiragana [_]))
